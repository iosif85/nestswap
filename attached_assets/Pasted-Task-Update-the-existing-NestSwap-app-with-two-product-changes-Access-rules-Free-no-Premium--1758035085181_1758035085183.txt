Task: Update the existing NestSwap app with two product changes:

Access rules:

Free (no Premium): can browse listings (list/map), view details, and book a stay.

Premium (subscription_status in ['active','trialing']): can create/edit listings (keep them active), upload photos, send/receive general messages, and create/manage swap requests (unchanged).

On lapse: when a user’s subscription becomes non-active (past_due|canceled|incomplete|none), set all their listings is_active=false. Existing confirmed bookings must remain honored.

Paid bookings (Booking.com-style):

Add nightly pricing to listings and a date-based booking flow with Stripe Checkout (one-time).

Any logged-in user can book (Premium not required).

Confirmed bookings create a booking-bound message thread (guest↔host) that is accessible even if the users are not Premium; general messaging outside bookings remains Premium-only.

Implement across backend, frontend, seeds, and tests, keeping current Stripe membership flow intact.

Backend (Flask) — concise spec

A) Premium gates (reuse existing subscription checks)

Create/extend decorator @premium_required (subscription_status in ('active','trialing')).

Apply to write endpoints:

Listings: POST /api/listings, PUT /api/listings/:id, DELETE /api/listings/:id, uploads.

Messages (general): GET /api/messages/threads, GET /api/messages/thread/:id, POST /api/messages/thread/:id.

Swaps: keep existing @subscription_required on create/manage; also gate GET /api/swaps/mine if not already.

Public GETs remain open, but search must filter is_active=true.

Error for gated actions: HTTP 402 { "error":"Premium membership required", "code":"SUB_REQUIRED" }.

B) Stripe membership webhook (existing)

After updating subscription_status, if not active/trialing, set the user’s listings is_active=false (log an audit entry). Do not auto-reactivate on return to active.

C) Bookings (new)

Listing model (add fields):
price_nightly_gbp (int, minor units), min_stay_nights (int, default 1), max_stay_nights (int|null), cleaning_fee_gbp (int, default 0), currency 'GBP', instant_book (bool, default True).

Booking model (new):
id, listing_id, guest_id, host_id, start_date, end_date, nights, amount_nightly_total, amount_cleaning_fee, amount_service_fee (start at 0), amount_total, currency 'GBP', status ('pending'|'paid'|'confirmed'|'cancelled'|'expired'|'refunded'), checkout_session_id, payment_intent_id, created_at, updated_at.

Message model: add optional booking_id to tie booking-bound threads.

Routes (new blueprint routes/bookings.py):

POST /api/bookings/quote → { listing_id, start_date, end_date } ⇒ validate dates, min/max stay, conflicts; return { nights, breakdown: { nightly_total, cleaning_fee, service_fee, total }, currency:'GBP' }.

POST /api/bookings/checkout (auth) → create Booking(status='pending'), compute totals, create Stripe Checkout (mode='payment'), save checkout_session_id, return { url, booking_id }. Hold dates for 15 min during pending.

POST /api/bookings/webhook → on checkout.session.completed: set status='paid' then confirmed, store payment_intent_id, block dates. On charge.refunded: set refunded. Verify signature with STRIPE_BOOKINGS_WEBHOOK_SECRET.

GET /api/bookings/mine (auth) → bookings where user is guest or host.

GET /api/bookings/:id (auth; guest/host/admin).

PUT /api/bookings/:id/cancel (guest before start_date) → set cancelled (no auto-refund; manual via Stripe dashboard).

Availability rules:

Quote/checkout must reject overlaps with confirmed/paid bookings and with pending bookings within the hold window, plus any explicit unavailability.

Booking-bound messaging:

When a booking is confirmed, auto-create or open a thread with booking_id.

Exempt threads with booking_id from Premium gate (only guest/host can access).

Env vars (add or reuse):

# Bookings (one-time payments)
STRIPE_BOOKINGS_SUCCESS_URL=http://localhost:5173/#/bookings/success?booking_id={BOOKING_ID}
STRIPE_BOOKINGS_CANCEL_URL=http://localhost:5173/#/bookings/cancel?booking_id={BOOKING_ID}
STRIPE_BOOKINGS_WEBHOOK_SECRET=whsec_...

Frontend (React) — concise spec

Access/UI logic

Show Browse to everyone.

Hide/disable Create Listing, Inbox, New Swap for non-Premium; clicking them opens PaywallModal with copy: “Premium unlocks listing, general messaging, and exchanges.”

Booking flows are available to any logged-in user.

Listing cards & details

Display £/night from price_nightly_gbp.

Date range picker on the detail page:

On selection, call POST /api/bookings/quote; show nights × nightly, cleaning fee, total.

Book now button → POST /api/bookings/checkout → redirect to Stripe Checkout.

Post-checkout routes

/bookings/success → fetch booking by id; show confirmation, summary, and “Open conversation” (booking-bound thread).

/bookings/cancel → allow retry with preserved dates.

Messaging

General messaging: Premium only (paywall if not).

Booking-bound threads: allowed for the two parties regardless of Premium.

Copy updates (Upgrade page)

Bullets include: “Create and edit listings”, “In-app messaging”, “Send and confirm swap requests”.

Booking is not listed as Premium; it’s available to all logged-in users.

Seeds & Tests

Seeds

Add nightly prices to demo listings; include one listing with instant_book=true.

Include at least one subscriber owner (active listings) and one non-subscriber owner (listings set is_active=false).

Tests (pytest)

Premium gates: non-subscriber gets 402 on listing create/edit/delete, general messaging, swaps; subscriber succeeds.

Bookings:

Quote correctness (nights, totals, min/max stay).

Prevent overlaps; pending hold window respected.

Checkout returns URL; webhook completion marks confirmed and blocks dates.

Booking-bound messaging accessible to guest/host without Premium.

Search: public GET only returns is_active=true listings.

Webhook (membership): lapsed subscriber → their listings auto-deactivated.

Acceptance criteria

Guests & non-Premium users can browse, view details, select dates, see price breakdown, and book (after login).

Non-Premium cannot create/edit listings, use general messaging, or swap (get paywall 402/PaywallModal).

Premium users can list, message, and swap as before.

Bookings flow works end-to-end with Stripe one-time payments; confirmed bookings block dates and open a booking-bound thread.

Membership webhook deactivates host listings on lapse; existing bookings remain.

Proceed to implement all changes now, keeping existing Stripe subscription code untouched.