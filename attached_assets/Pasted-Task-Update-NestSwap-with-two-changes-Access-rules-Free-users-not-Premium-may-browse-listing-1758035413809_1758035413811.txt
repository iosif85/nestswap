Task: Update NestSwap with two changes:

Access rules:

Free users (not Premium): may browse listings (grid + map) and view listing details.

Premium users (subscription_status in ['active','trialing']): may create/edit listings, send/receive messages, and create/manage swap requests.

On membership lapse (past_due|canceled|incomplete|none), set all of the user’s listings is_active=false (do not delete). Existing data is retained.

Remove prices:

Remove all price/night concepts from the codebase (backend models/schemas/routes, frontend UI, search filters, tests, and seed/demo data).

Keep the Stripe membership (£10/year) flow exactly as is (checkout, portal, webhook, paywall).

A) Backend (Flask)

1) Premium gates

Add a decorator @premium_required (or reuse @subscription_required) that checks:

user.subscription_status in ('active', 'trialing')


Apply to write endpoints:

Listings: POST /api/listings, PUT /api/listings/:id, DELETE /api/listings/:id, uploads.

Messages: GET /api/messages/threads, GET /api/messages/thread/:id, POST /api/messages/thread/:id.

Swaps: keep/create guard on POST /api/swaps and any swap-manage endpoints; optionally gate GET /api/swaps/mine.

Public GET endpoints remain open but must filter is_active=true.

For gated actions, return HTTP 402 with:

{ "error": "Premium membership required", "code": "SUB_REQUIRED" }


2) Webhook toggle on lapse

In the existing Stripe membership webhook handler, after updating subscription_status:

If not in ('active','trialing'), set all of that user’s listings is_active=false (log an audit entry).

Do not auto-reactivate on re-subscription; the user can edit/toggle afterward.

3) Remove price/night fields

Models: From Listing, delete any of the following if present:
price, price_nightly, price_nightly_gbp, currency, cleaning_fee, min_stay_nights, max_stay_nights, or similar.

Migrations (Alembic): Create a migration that drops those columns. Provide a reversible downgrade that re-adds them as nullable (no defaults).

Schemas/validation: Remove price-related fields from request/response schemas.

Routes/services: Delete any price-based logic (sorting/filtering/validation).

Search service: Remove price filters (e.g., price_min, price_max) and keep keyword/location/amenities/date filters only.

B) Frontend (React)

1) Access & paywall UX

Keep Browse pages fully accessible to everyone.

For non-Premium users:

Hide/disable Create Listing buttons and Messaging entry points; clicking shows PaywallModal with copy:
“Premium (£10/year) unlocks listing, messaging, and exchanges.”

On protected routes (/listings/new, /listings/:id/edit, /messages/*, /swaps/*), redirect to /billing/upgrade or open the paywall.

Swaps remain Premium-only as before.

2) Remove price/night UI

Remove price labels/sections from:

Cards (/features/listings/Browse.tsx), details (ListingDetail.tsx), create/edit forms, and any sidebars/tooltips.

Remove price filters/sliders from Browse filters.

Remove any “£/night” badges, totals, or hints across components.

Ensure TypeScript Listing interfaces no longer include any price fields.

3) Keep billing UI intact

Do not change /billing/Upgrade.tsx, PaywallModal.tsx, or /api/billing.ts (membership stays exactly the same).

C) Seeds, Docs, and Tests

Seeds

Strip all price fields from demo listings; ensure demo data has no currency/price text.

Docs

Update README.md to reflect: Browsing is free; Premium is required to list, message, and exchange. Remove any price/night references.

Tests (pytest)

Update/remove tests that referenced price filters or price fields.

Add/confirm Premium gate tests:

Non-subscriber → 402 on listing create/edit/delete, messaging, and swap creation.

Subscriber → permitted (200/201).

Ensure public listing GET returns only is_active=true.

D) Grep checklist (must be zero after change)

Search & remove references (except Stripe membership copy):
price, pricing, nightly, rate, min_price, max_price, priceMin, priceMax, cleaning_fee, currency (only keep if used elsewhere legitimately).

E) Acceptance criteria

Guest / Non-Premium: can browse and view details; attempting to list, message, or exchange triggers paywall (or 402 on API).

Premium user: can create/edit listings, upload photos, message, and create/manage swaps.

No UI text or API fields show prices or £/night; Browse filters have no price filter.

Demo/seed listings show no price info.

Membership webhook deactivates a lapsed user’s listings (is_active=false).

All tests pass.

Proceed to implement all changes now, keeping Stripe membership code untouched.